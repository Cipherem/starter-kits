import time

from forta_agent import Finding, FindingType, FindingSeverity
import requests
import pandas as pd

from src.constants import (
    ETHERSCAN_UPDATE_CADENCE,
    ETHERSCAN_BLOCKLIST_PATH,
    ETHERSCAN_BLOCKLIST_UPDATE_AT,
    LUABASE_URL,
    LUABASE_API_KEY,
)


def update_etherscan_blocklist():
    payload = {
        "block": {"data_uuid": "c5a2521e9cc746ac8e455412657528ca"},
        "api_key": LUABASE_API_KEY,
    }
    headers = {"content-type": "application/json"}
    try:
        print(f"updating blocklist: {ETHERSCAN_BLOCKLIST_PATH}")
        response = requests.request("POST", LUABASE_URL, json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()
        df = pd.DataFrame.from_dict(data["data"])
        df.to_csv(ETHERSCAN_BLOCKLIST_PATH, index=None)
    except requests.exceptions.HTTPError as err:
        print(err)


def provide_handle_transaction():
    def handle_transaction(transaction_event):
        global ETHERSCAN_BLOCKLIST_UPDATE_AT

        findings = []

        addresses = transaction_event.addresses

        blocklist = pd.read_csv(ETHERSCAN_BLOCKLIST_PATH)
        matches = (
            blocklist.loc[blocklist.banned_address.isin(addresses)]
            .drop_duplicates(subset=["banned_address"], keep="first")
            .fillna("")
        )

        for _, match in matches.iterrows():
            exploiter_address = match.banned_address
            wallet_tag = match.wallet_tag
            data_source = match.data_source
            description_msg = (
                f"Transaction involving an exploiter address: {exploiter_address}"
            )

            if wallet_tag:
                description_msg += f" with wallet tag: {wallet_tag}"

            finding = Finding(
                {
                    "name": "Exploiter Address",
                    "description": description_msg,
                    "alert_id": "EXPLOITER-ADDR-TX",
                    "severity": FindingSeverity.High,
                    "type": FindingType.Suspicious,
                    "metadata": {
                        "exploiter_address": exploiter_address,
                        "wallet_tag": wallet_tag,
                        "data_source": data_source,
                    },
                }
            )
            findings.append(finding)

        # update list
        now = time.time()
        if now - ETHERSCAN_BLOCKLIST_UPDATE_AT >= ETHERSCAN_UPDATE_CADENCE:
            print("updating start")
            update_etherscan_blocklist()
            print("updating end")
            ETHERSCAN_BLOCKLIST_UPDATE_AT = now

        return findings

    return handle_transaction


real_handle_transaction = provide_handle_transaction()


def handle_transaction(transaction_event):
    return real_handle_transaction(transaction_event)
