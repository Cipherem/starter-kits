"""Test the agent on a fork"""

import forta_agent
import pytest
import web3

import src.agent as agent

# FIXTURES ####################################################################

TOKENS = {
    'fake': '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
    'ilv': '0x767fe9edc9e0df98e07454847909b5e959d7ca0e',
    'buyback': '0xb23a19d28a7e9bdec030782346b0d9ace11530f5',
}

TRANSACTIONS = {
    'random': forta_agent.create_transaction_event({
        'transaction': {
            'hash': '0xa07bc1b96e9f86c4d86c949fbf03009fc8654287f6d17927685079798ba059b1',
            'from': '0x1D9eF97f27A32178ef5465a5593c63746aAF6440',
            'to': '0xdAC17F958D2ee523a2206206994597C13D831ec7', # USDT
            'data': '0xa9059cbb0000000000000000000000006dfc34609a05bc22319fa4cce1d1e2929548c0d700000000000000000000000000000000000000000000000000000000017fc230'},
        'block': {
            'number': 17601524,
            'timestamp': 1688235491}}),
    'disperse-token-ilv': forta_agent.create_transaction_event({
        'transaction': {
            'hash': '0x2e311b6e9c842e4ec06712cad2acb6be9d6eec341c348a7dc3aac51ec9a8426c',
            'from': '0xabd8963cf373745bbf4f3ee535d8daeb944789f8',
            'to': '0xd152f549545093347a162dce210e7293f1452150', # Disperse
            'data': '0xc73a2d60000000000000000000000000767fe9edc9e0df98e07454847909b5e959d7ca0e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000007f3eaa03c2deb2b909b7ff5ecf4a20f540ab1de0000000000000000000000004c956623424394c5dc4fd71f04bb28ee117b496f00000000000000000000000077d880c57f0aafea9f41405098dbe60b538cfa750000000000000000000000004eaec98a381fb95067278b1bec977b83a501dd2f000000000000000000000000380846d771c1fc8a0f7724ee98f86e2127474239000000000000000000000000fe5a0a6eca55ce3c0343a447b779ab4346c801a70000000000000000000000002174974d39141d4293c38a9b7be5b915a746ea44000000000000000000000000fe5a0a6eca55ce3c0343a447b779ab4346c801a70000000000000000000000006b2dd9587357b1bd0e7540c48733960b3e873606000000000000000000000000ac93e5f3c1512dba1eb5eed0136ccaaf31d04561000000000000000000000000f7845cc3d24a511e15a0368871465f0dc5ae4fb1000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000783b5d2d0cfb7a800000000000000000000000000000000000000000000000003e576f0bd8eb94000000000000000000000000000000000000000000000000003e576f0bd8eb940000000000000000000000000000000000000000000000000064320080e66c56800000000000000000000000000000000000000000000000004ded4acecf26790000000000000000000000000000000000000000000000000070a6b2637cf783800000000000000000000000000000000000000000000000007036fb155341a400000000000000000000000000000000000000000000000000703a2c351b4bfb0000000000000000000000000000000000000000000000000070706f4b91de08000000000000000000000000000000000000000000000000003e8db2232f02168000000000000000000000000000000000000000000000000137b52b3b3c99e4000'},
        'block': {
            'number': 17601512,
            'timestamp': 1688192147}}),
    'multisend-token-buyback': forta_agent.create_transaction_event({
        'transaction': {
            'hash': '0x78b093c64e09cb7a3ce6bad2480549b058550faa5ba21be7c19ad732dc761fc5',
            'from': '0x3360a4e0eb33161da911b85f7c343e02ea41bbbd',
            'to': '0x22bc0693163ec3cee5ded3c2ee55ddbcb2ba9bbe', # Multisend
            'data': '0x0b66f3f5000000000000000000000000b23a19d28a7e9bdec030782346b0d9ace11530f5000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000d5481575130a7decf4503c81a50152b3753031f90000000000000000000000007b753919b953b1021a33f55671716dc13c1eae080000000000000000000000009d7750ff4cfda1988ab08a7315d30064ab2058060000000000000000000000009ea38c605c07f926df8bde0b3701b5d60c2e6ec6000000000000000000000000b2ea3889506327db2defb9554752d211f8e2a366000000000000000000000000d72cb55fd6e7d94808b27b15f6132cdfcf5a0461000000000000000000000000f7b18e107eb36797f4ce36de756630b9c30969ad000000000000000000000000ddf2f1896224fd357161216dac3331e203cc354100000000000000000000000054307a0744c24bfd5899d4c6b19934736b39349c000000000000000000000000698e9a51378ed9b292e1ea27cd2ba419aee0e4a400000000000000000000000079a3d154b017193464774683f4698d6e0f98cad900000000000000000000000051a5db7df4bc1df6669cc3f0dc9184da9a06bd19000000000000000000000000a02b254808462f5b34b6f93526449a1d972cbe46000000000000000000000000c37e67148ed61006074554ed00691f5183206020000000000000000000000000b774c54b016b79bbec24b2e8af0535e420476a08000000000000000000000000022e73a40f6a719bdde859620c1191fa3554be1d000000000000000000000000000ab07b26c48ef3caf9ec23520d86794c9fd74a000000000000000000000000324a77ffee86a7ec082f8395f060bc4e94e601980000000000000000000000003360a4e0eb33161da911b85f7c343e02ea41bbbd0000000000000000000000003a2a72ff37afe42b2c2747366be5ecdacb211d8a00000000000000000000000064b81b0c40dde40d0e0e1a7e87300a7cb02d04f50000000000000000000000006cd68e8f04490cd1a5a21cc97cc8bc15b47dc9eb0000000000000000000000008023dccc72d5ffd7dc224518ddca72b7be1cb8df0000000000000000000000009c6f3006085575d711a2b37f639047e9232c1759000000000000000000000000b778194f59871bae39ffee15ddcb05972472366b000000000000000000000000bec2635b44d26acf54dda59644ddb71fb0e0268d0000000000000000000000000c3ad884578178f6782d637cb0531a75aa1760e000000000000000000000000011b4e83bc3e9605f03e2a4c34bd09567be5aebbe000000000000000000000000169bc8711d371711932ec3845fbaa6928057a1890000000000000000000000002ac6e5b6a4e393202253eac03a428d2f52b8606900000000000000000000000033fc2be5563e3c02a3e127f01bbd71db472aa6130000000000000000000000003585ca22df80d70f6d1cc0867d8387c3601813490000000000000000000000004834614c3993e059a5f70a2d48a4ea90d30e7c1300000000000000000000000075d514b6040727c19ae06ae8f1a1c7912c4c91c00000000000000000000000007e28bbdcc4d3c3c8df646c37ac0ee66ad1c9c04d0000000000000000000000009156659d080ed0d8b88b83fb3072cd8a78c17e14000000000000000000000000a3560e3ed5ed0f0901df9ca02b8518bc1f00470a000000000000000000000000ad83954e1584e7df91ef1e1a5f5661684e2dc751000000000000000000000000b25e1b7d4a5b0486285a60501b05a45a6a6cb6ba000000000000000000000000b3da159cfeb3b5319f4d5a1fc6ad7193ffbde459000000000000000000000000b404f05e71fc9d065a3bc26815a0d56880bc8315000000000000000000000000cbefc51ae3dea6a40c0182cd05c985f0f3b66633000000000000000000000000db5c24bb90030ed61c91896c5111a954d9375b4e000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000000000000000000000000008670e9ec6598c00000000000000000000000000000000000000000000000000068155a43676e000000000000000000000000000000000000000000000000000068155a43676e000000000000000000000000000000000000000000000000000068155a43676e000000000000000000000000000000000000000000000000000068155a43676e000000000000000000000000000000000000000000000000000068155a43676e00000000000000000000000000000000000000000000000000005f68e8131ecf800000000000000000000000000000000000000000000000000049b9ca9a694340000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000410d586a20a4c000000000000000000000000000000000000000000000000000410d586a20a4c000000000000000000000000000000000000000000000000000410d586a20a4c0000000000000000000000000000000000000000000000000003cb71f51fc558000000000000000000000000000000000000000000000000000270801d946c9400000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000022b1c8c1227a00000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000'},
        'block': {
            'number': 16093631,
            'timestamp': 1669938431}})}

@pytest.fixture
def w3():
    return web3.Web3(web3.EthereumTesterProvider())

@pytest.fixture
def no_filter_handle_transaction(w3):
    return agent.handle_transaction_factory(w3=w3)

@pytest.fixture
def token_filter_handle_transaction(w3):
    return agent.handle_transaction_factory(w3=w3, token=TOKENS['buyback'])

# RANDOM TX ###################################################################

def test_ignores_random_transactions(no_filter_handle_transaction):
    assert len(no_filter_handle_transaction(TRANSACTIONS['random'])) == 0

# BATCH ERC20 TRANSFERS #######################################################

def test_detects_erc_batched_transfers(no_filter_handle_transaction):
    assert len(no_filter_handle_transaction(TRANSACTIONS['disperse-token-ilv'])) > 0
    assert len(no_filter_handle_transaction(TRANSACTIONS['multisend-token-buyback'])) > 0

# FILTER BY TOKEN #############################################################

def test_filters_findings_by_token(token_filter_handle_transaction):
    assert len(token_filter_handle_transaction(TRANSACTIONS['disperse-token-ilv'])) == 0
    assert len(token_filter_handle_transaction(TRANSACTIONS['multisend-token-buyback'])) > 0
